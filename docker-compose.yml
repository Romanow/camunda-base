version: "3"
services:
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/:/docker-entrypoint-initdb.d/
    ports:
      - "5432:5432"
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.5"
          memory: 256M

  camunda:
    build: .
    image: romanowalex/camunda-base:v1.2
    container_name: camunda
    environment:
      SPRING_PROFILES_ACTIVE: docker
    healthcheck:
      test: [ "CMD", "curl", "--silent", "--fail", "http://localhost:8080/manage/health" ]
      interval: 20s
      timeout: 10s
      retries: 10
    ports:
      - "8080:8080"
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.5"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 1G
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: on-failure
    depends_on:
      - postgres

  prometheus:
    image: prom/prometheus:v2.41.0
    container_name: prometheus
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090" ]
      interval: 10s
      timeout: 15s
      retries: 10
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus/data"
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.5"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 1G
      restart_policy:
        condition: on-failure

  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: node-exporter
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
      - --collector.netclass.ignored-devices=^(veth.*)$
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    deploy:
      mode: global
      resources:
        limits:
          cpus: "0.2"
          memory: 512M
        reservations:
          cpus: "0.2"
          memory: 512M
      restart_policy:
        condition: on-failure
    depends_on:
      - prometheus

  postgres-exporter:
    image: bitnami/postgres-exporter:0.13.2
    container_name: postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres:5432/postgres?sslmode=disable"
    ports:
      - "9187:9187"
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.1"
          memory: 128M
        reservations:
          cpus: "0.1"
          memory: 128M
      restart_policy:
        condition: on-failure
    depends_on:
      - postgres
      - prometheus

  grafana:
    image: grafana/grafana:9.4.7
    container_name: grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_BASIC_ENABLED=false
      - GF_USERS_DEFAULT_THEME=light
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health" ]
      interval: 10s
      timeout: 15s
      retries: 10
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/:/etc/grafana/provisioning/
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.5"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 1G
      restart_policy:
        condition: on-failure
    depends_on:
      - prometheus

volumes:
  postgres-data:
  prometheus-data:
  grafana-data:
